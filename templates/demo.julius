(function () {
    var app = angular.module("mapixDemo", []);

    app.controller("DemoController", function () {
        //
        // Demo modes (by colors, or by image).
        //

        this.MODES = { BY_COLORS: 0, BY_IMAGE: 1 };

        this.mode = this.MODES.BY_COLORS;

        this.images = [];
    });

    //
    // Search by colors
    //

    app.controller("SearchByColorsController", function () {
        this.colors = [
            {
                rgb: { red: 52, green: 152, blue: 219 }, html: "#3498db",
                weight: 65
            }, {
                rgb: { red: 230, green: 126, blue: 34 }, html: "#e67e22",
                weight: 35
            }
        ];

        // Converts the three HSL components into a RGB color object
        // ({ red: x, green: y, blue: z }).
        function HSLToRGB(hue, sat, light)
        {
            // Uses the formula from:
            // <http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color>

            // Normalizes value to fractions 0..1.
            hue   /= 360;
            sat   /= 100;
            light /= 100;

            var m2;
            if (light <= 0.5)
                m2 = light * (sat + 1);
            else
                m2 = light + sat - light * sat;

            var m1 = light * 2 - m2;

            function hueToRGB(m1, m2, hue)
            {
                if (hue < 0)
                    hue += 1;
                else if (hue > 1)
                    hue -= 1;

                if (hue * 6 < 1)
                    return m1 + (m2 - m1) * hue * 6;
                else if (hue * 2 < 1)
                    return m2;
                else if (hue * 3 < 2)
                    return m1 + (m2 - m1) * (2 / 3 - hue) * 6;
                else
                    return m1;
            };

            var r = 255 * hueToRGB(m1, m2, hue + 1 / 3);
            var g = 255 * hueToRGB(m1, m2, hue);
            var b = 255 * hueToRGB(m1, m2, hue - 1 / 3);

            return {
                red: Math.round(r), green: Math.round(g), blue: Math.round(b)
            };
        }

        // Converts an RGB color object ({ red: x, green: y, blue: z }) into
        // an hexadecimal color code (e.g. #58BFDC).
        function RGBToHex(rgb)
        {
            function byteToHex(byte)
            {
                var HEX_CHARS = "0123456789abcdef";
                return HEX_CHARS[Math.round(byte / 16)] + HEX_CHARS[byte % 16];
            }

            return "#" + byteToHex(rgb.red) + byteToHex(rgb.green)
                       + byteToHex(rgb.blue);
        }

        this.addColor = function (hue, sat, light) {
            var rgb = HSLToRGB(hue, sat, light);

            // Reduces the weights of the previously inserted colors.
            var factor = this.colors.length / (this.colors.length + 1);
            for (var i in this.colors)
                this.colors[i].weight *= factor;

            this.colors.push({
                rgb: rgb,
                html: RGBToHex(rgb),
                weight: 100 / (this.colors.length + 1)
            });
        }

        this.removeColor = function (index) {
            var weight = this.colors[index].weight;

            this.colors.splice(index, 1);

            // Adds the weight of the removed color to each remaining colors.
            var toAdd = weight / this.colors.length;
            for (var i in this.colors)
                this.colors[i].weight += toAdd;
        };
    });

    // Controls the color picker.
    app.controller("ColorSelectorController", function () {
        this.N_HUES     = 36;
        this.N_LIGHTS   = 36;
        this.SAT        = 70;

        this.HUES = [];
        for (var i = 0; i < this.N_HUES; i++)
            this.HUES.push((i * 360 / this.N_HUES + 15) % 360);

        this.LIGHTS = [];
        for (var i = 0; i < this.N_LIGHTS; i++)
            this.LIGHTS.push((this.N_LIGHTS - i) * 90 / this.N_LIGHTS);
    });

    // Enables the Bootstrap Slider on the <input> element containing the
    // directive.
    app.directive('bootstrapSlider', function() {
        return function(scope, element, attrs) {
            element.slider()
                   .slider("setValue", parseInt(attrs.value));

            // Updates the slider on model change.
            scope.$watch(
                attrs.ngModel,
                function (newValue, oldValue) {
                    element.slider("setValue", parseInt(newValue));
                }
            );
        };
    })
})();
